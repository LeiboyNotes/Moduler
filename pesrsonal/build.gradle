if (isRelease) {
    apply plugin: 'com.android.library'
} else {
    apply plugin: 'com.android.application'
}


def androidId = rootProject.ext.androidId
def appId = rootProject.ext.appId
def support = rootProject.ext.dependencies

android {
    compileSdkVersion androidId.compileSdkVersion
    buildToolsVersion androidId.buildToolsVersion


    defaultConfig {
        if (!isRelease) {
            applicationId appId.personal
        }
        minSdkVersion androidId.minSdkVersion
        targetSdkVersion androidId.targetSdkVersion
        versionCode androidId.versionCode
        versionName androidId.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //这个方法接收三个非空参数，第一个：确定值的类型，第二个：指定key的名字，第三个：传值（必须是String）
        //为什么需要定义这个？因为src代码中有可能用到跨模块交互，如果是组件化模块显然不行
        //不能在Android根节点，只能在defaultConfig或buildType节点下
        buildConfigField("boolean", "isRelease", String.valueOf(isRelease))

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    //配置资源路径，方便测试环境，打包不集成到正式环境3717
    sourceSets {
        main {
            if (!isRelease) {
                //如果是组件化模式，需要单独运行时
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'//存放AndroidManifest.xml
            } else {
                //集成化模式，整个项目打包apk
                manifest.srcFile 'src/main/AndroidManifest.xml'

                java {
                    //release时debug目录下文件不需要合并到主工程
                    exclude '**/debug/**'    //存放代码
                }

            }

        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation project(':arouter_annotation')
    support.each { k, v -> implementation v }
    implementation project(":common")
}
